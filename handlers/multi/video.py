# handlers/multi/video.py
import os
import uuid
from telebot import types
from services.storage import save_file
from services.watermark import apply_video_watermark, generate_preview_variants
from utils.watermark_ui import ask_watermark_size, SCALE_MAP  # üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

def handle_multi_video(bot, message, state):
    chat_id = message.chat.id
    step = state.get("step")

    if step == "multi_video" and message.video:
        path = save_file(bot, message, "media/input")
        state.setdefault("media_files", []).append(path)
        bot.send_message(chat_id, f"üéû –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {len(state['media_files'])}")
        send_upload_buttons(bot, chat_id)

    elif step == "multi_video" and message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not state.get("media_files"):
            bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤–∏–¥–µ–æ.")
            return
        state["step"] = "multi_video_watermark"
        bot.send_message(chat_id, "üñº –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ (PNG/—Ñ–æ—Ç–æ).")

    elif step == "multi_video_watermark" and (message.photo or message.document):
        watermark_path = save_file(bot, message, "media/input")
        state["watermark_path"] = watermark_path
        state["step"] = "multi_video_choose_position"

        preview_path = state["media_files"][0]
        previews = generate_preview_variants(preview_path, watermark_path)

        media = [
            types.InputMediaPhoto(open(p, "rb"), caption=f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}" if i == 0 else None)
            for i, p in enumerate(previews)
        ]
        bot.send_media_group(chat_id, media , timeout=60)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3", "–í–∞—Ä–∏–∞–Ω—Ç 4")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:", reply_markup=markup)

    elif step == "multi_video_choose_position" and message.text.startswith("–í–∞—Ä–∏–∞–Ω—Ç "):
        try:
            variant = int(message.text.split()[-1])
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
            return

        state["last_position_variant"] = variant
        ask_watermark_size(bot, chat_id, state, next_step_key="multi_video_apply")

    elif step == "multi_video_apply" and message.text in SCALE_MAP:
        scale_ratio = SCALE_MAP[message.text]
        variant = state.get("position_variant", 1)

        bot.send_message(chat_id, f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(state['media_files'])} –≤–∏–¥–µ–æ...")

        results = []
        for in_path in state["media_files"]:
            filename = os.path.basename(in_path)
            out_path = f"media/output/{uuid.uuid4()}_v{variant}_{filename}"
            try:
                apply_video_watermark(in_path, out_path, state["watermark_path"], variant, scale_ratio)
                results.append(out_path)
            except Exception as e:
                bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")

        for path in results:
            with open(path, "rb") as f:
                bot.send_document(chat_id, f , timeout=60)

        bot.send_message(chat_id, "‚úÖ –í—Å–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        state.clear()
        bot.send_message(chat_id, "‚Ü© –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

def send_upload_buttons(bot, chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add("‚ûï –ï—â—ë –∑–∞–≥—Ä—É–∑–∏—Ç—å", "‚úÖ –ì–æ—Ç–æ–≤–æ")
    bot.send_message(chat_id, "üéû –ï—â—ë –≤–∏–¥–µ–æ?", reply_markup=markup)
